{
    "collab_server" : "",
    "contents" : "library(shiny)\nlibrary(leaflet)\nlibrary(RColorBrewer)\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(highcharter)\n\n### global map settings \n# custom palette from color brewer for categorical data\nbrewer_light = c(\"#8dd3c7\", \"#ffffb3\", \"#bebada\", \"#fb8072\", \"#80b1d3\", \"#fdb462\")\nbrewer_solid = c('#1b9e77','#d95f02','#7570b3','#e7298a','#66a61e','#e6ab02')\n\n# set palette for chloropleth\nfactpal <- colorFactor(\n  palette = brewer_solid,\n  domain = sfspatial$genre1\n)\n\n### begin shiny server\nshinyServer(function(input, output) {\n  \n  v <- reactiveValues(vid = T)\n  \n  venue_select <- reactive({\n    id <- input$map_marker_click$id\n    v$vid <- T\n    return(id)\n  })\n  \n  # details title panel (all venues or venue based on click)\n  output$context <- renderUI({\n    id <- venue_select()\n    if(!is.null(id) && v$vid == T) {\n      venue <- venues %>% filter(venue_id == id) %>% select(venue)\n      tagList(\n        h3(venue),\n        actionLink(\"all\", \"All Venues\")\n      )\n    } else {\n      h3(\"All Venues\")\n    }\n  })\n  \n  ### table outputs in details\n  output$upcoming <- renderTable({\n    print(top_upcoming())\n  }, include.rownames = F, include.colnames = F)\n  \n  output$popular <- renderTable({\n    print(most_popular())\n  }, include.rownames = F, include.colnames = F)\n  \n  # map output -- set all options here\n  output$map <- renderLeaflet({\n    leaflet() %>%\n      addProviderTiles(\"CartoDB.PositronNoLabels\") %>%\n      setView(lng = -122.417, lat = 37.7785, zoom = 13) %>%\n      addPolygons(\n        data = sfspatial,\n        layerId = ~ neighborhood,\n        # fillColor = ~ factpal(genre1), \"#b2aeae\"\n        color = ~ factpal(genre1),\n        fillOpacity = 0.5,\n        weight = 1,\n        smoothFactor = 1\n      ) %>%\n      addLegend(\n        layerId = \"legend\",\n        position = \"bottomleft\",\n        pal = factpal,\n        values = sfspatial$genre1,\n        title = \"Most popular genre by neighborhood\",\n        opacity = 0.5\n      ) %>%\n      addCircleMarkers(\n        data = venues,\n        lat = ~ lat,\n        lng = ~ lng,\n        radius = ~ ifelse(description == \"Venue\", 10, 5),\n        color = \"navy\",\n        layerId = ~ venue_id,\n        popup = ~ venue,\n        stroke = T\n      ) \n  })\n  \n\n### Reactive functions to process events\n  events_cleaned <- reactive({\n    all_events %>%\n      mutate(len = nchar(artist)) %>%\n      filter(billing_index == 1, date >= Sys.Date(), city == 'San Francisco', len < 30) %>%\n      mutate(date_format = paste0(format(date, \"%d\"), \" \", month(date, label = T, abbr = T))) %>%\n      distinct(artist) \n  })\n  \n  events_all <- reactive({\n    all_events %>%\n      filter(city == 'San Francisco')\n  })\n  \n  top_upcoming <- reactive({\n    id <- input$map_marker_click$id\n    if(!is.null(id) && v$vid == T) {\n      events_cleaned() %>%\n        filter(venue_id == id) %>%\n        arrange(date, desc(popularity)) %>%\n        select(date_format, artist)  %>%\n        head(6)\n    } else {\n      events_cleaned() %>%\n        arrange(date, desc(popularity)) %>%\n        mutate(text = paste0(artist, \" at \", venue)) %>%\n        select(date_format, text) %>%\n        head(6)\n    }\n  })\n  \n  most_popular <- reactive({\n    id <- input$map_marker_click$id\n    if(!is.null(id) && v$vid == T) {\n      events_cleaned() %>%\n        filter(venue_id == id) %>%\n        arrange(desc(popularity)) %>%\n        select(date_format, artist) %>%\n        head(3)\n    } else {\n      events_cleaned() %>%\n        arrange(desc(popularity)) %>%\n        mutate(text = paste0(artist, \" at \", venue)) %>%\n        select(date_format, text) %>%\n        head(3)\n    }\n  })\n  \n  chart_data <- reactive({\n    data <- events_all()\n    id <- input$map_marker_click$id\n    if(!is.null(id) && v$vid == T) { \n      data <- data %>% filter(venue_id == id) \n    }\n    chart_data <- data %>%\n      filter(!is.na(genre)) %>%\n      count(genre) %>%\n      arrange(desc(n)) %>%\n      head(8)\n    return(chart_data)\n  })\n  \n  output$chart <- renderHighchart({\n    data <- chart_data()\n    hc <- highchart() %>%\n      hc_plotOptions(\n        lang = list(\n          noData = T\n        )\n      ) %>%\n      hc_chart(type = \"column\") %>%\n      hc_title(text = \"Count of artists by genre\",\n               verticalAlign = \"top\",\n               style = list(\n                 \"fontSize\" = \"10px\"\n               )) %>%\n      hc_yAxis(visible = F) %>%\n      hc_legend(enabled = F) %>%\n      hc_xAxis(categories = data$genre) %>%\n      hc_add_series(name = \"Genre\", data = data$n, color = \"rgb(0, 0, 128)\")\n    return(hc)\n  })\n  \n  output$event_table <- DT::renderDataTable({\n    df <- events_all() %>%\n      filter(\n        billing_index == 1,\n        is.null(input$neighborhoods) | neighborhood %in% input$neighborhoods,\n        is.null(input$venues) | venue %in% input$venues\n      ) %>%\n      select(event_id, date, venue, city, neighborhood, artist, genre, term,\n             popularity, familiarity, discovery)\n  })\n  \n  observeEvent(input$all, {\n    v$vid <- F\n  })\n  \n\n})\n",
    "created" : 1460746175295.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4091099957",
    "id" : "7589B3D7",
    "lastKnownWriteTime" : 1461301236,
    "last_content_update" : 1461301236286,
    "path" : "~/Development/maps/events_leaflet/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}