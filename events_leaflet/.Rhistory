all_events$date
as.Date(all_events$date, format = "%d %B")
library(lubridate)
as_date(all_events$date)
?as_date
dm(as_date(all_events$date))
runApp()
runApp()
str(all_events)
runApp()
as.Date(all_events$date)
as.Date(all_events$date, format = "%d%B")
as.Date(all_events$date, format = "%Y %m %d")
as.Date(all_events$date, "%Y %m %d")
as.Date(all_events$date, "%Y-%m-%d")
runApp()
runApp()
runApp()
runApp()
ymd(all_events$date)
ym(all_events$date)
?lubridate
day(all_events$date)
runApp()
runApp()
runApp()
?day
runApp()
runApp()
runApp()
runApp()
runApp()
all_events %>%
filter(venue_id = 240)
str(all_events)
all_events %>%
filter(venue_id == 40)
venues
venues %>%
filter(venue_id == 40) %>%
select(venue_sql)
venues %>%
filter(venue_id == 40) %>%
select(venue)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?deployApp
all_events <- readRDS("data/all_events.rds")
str(all_events)
runApp()
runApp()
events_cleaned() %>%
filter(venue_id == id) %>%
arrange(date, desc(popularity)) %>%
select(date_format, artist)  %>%
head(12)
all_events %>%
filter(billing_index == 1, date >= Sys.Date(), city == 'San Francisco') %>%
mutate(date_format = paste0(format(date, "%d"), " ", month(date, label = T, abbr = T))) %>%
distinct(artist)
events_cleaned() %>%
filter(venue_id == id) %>%
arrange(date, desc(popularity)) %>%
select(date_format, artist)  %>%
head(12)
events_cleaned <-     all_events %>%
filter(billing_index == 1, date >= Sys.Date(), city == 'San Francisco') %>%
mutate(date_format = paste0(format(date, "%d"), " ", month(date, label = T, abbr = T))) %>%
distinct(artist)
events_cleaned() %>%
filter(venue_id == id) %>%
arrange(date, desc(popularity)) %>%
select(date_format, artist)  %>%
head(12)
events_cleand <- all_events %>%
filter(billing_index == 1, date >= Sys.Date(), city == 'San Francisco') %>%
mutate(date_format = paste0(format(date, "%d"), " ", month(date, label = T, abbr = T))) %>%
distinct(artist)
events_cleaned
events_cleaned() %>%
filter(venue_id == id) %>%
arrange(date, desc(popularity)) %>%
select(date_format, artist)  %>%
head(12)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?ifelse
runApp()
all_events
all_events$venue
str(all_events)
str(venues)
runApp()
runApp()
runApp()
all_events
all_events %>%
spread(artist_id)
library(dplyr)
all_events %>%
spread(artist_id)
library(tidyr)
all_events %>%
spread(artist_id)
?spread
all_events %>%
filter(!is.null(genre1), venue_id = 324)
all_events %>%
filter(!is.null(genre1), venue_id == 324)
all_events %>%
filter(!is.null(genre1), venue_id == 324) %>%
select(genre1)
runApp()
all_events %>%
filter(!is.na(genre1), venue_id == 324) %>%
select(genre1)
all_events %>%
filter(!is.na(genre1), venue_id == 324) %>%
count(genre1)
all_events %>%
filter(!is.na(genre1), venue_id == 324) %>%
select(genre1)
all_events %>%
filter(!is.na(genre1), venue_id == 324) %>%
select(genre1) %>%
spread(genre1)
all_events %>%
filter(!is.na(genre1), venue_id == 324) %>%
count(genre1)
all_events %>%
filter(!is.na(genre1), venue_id == 65) %>%
count(genre1)
all_events %>%
filter(!is.na(genre1), venue_id == 5614) %>%
count(genre1)
all_events %>%
filter(!is.na(genre1), venue_id == 1261) %>%
count(genre1)
all_events %>%
filter(!is.na(genre1), venue_id == 329) %>%
count(genre1)
all_events %>%
filter(!is.na(term1), venue_id == 329) %>%
count(term1)
all_events %>%
filter(!is.na(term1), venue_id == 324) %>%
count(term1)
all_events %>%
filter(!is.na(term1), venue_id == 6239) %>%
count(term1)
all_events %>%
filter(!is.na(genre1), venue_id == 6239) %>%
count(genre1)
all_events %>%
filter(!is.na(genre1), venue_id == 1236) %>%
count(genre1)
all_events %>%
filter(!is.na(genre1), venue_id == 5614) %>%
count(genre1)
all_events %>%
filter(!is.na(genre1), venue_id == 1108926) %>%
count(genre1)
all_events %>%
filter(!is.na(genre1), venue_id == 2029634) %>%
count(genre1)
library(highcharter)
all_events %>%
filter(!is.na(genre1), venue_id == 2029634) %>%
count(genre1) %>%
hchart()
all_events %>%
filter(!is.na(genre1), venue_id == 2029634) %>%
count(genre1) %>%
as.data.frame() %>%
hchart()
?hchart
all_events %>%
filter(!is.na(genre1), venue_id == 2029634) %>%
count(genre1) %>%
as.data.frame() %>%
hchart(genre1)
test <- tall_events %>%
filter(!is.na(genre1), venue_id == 2029634) %>%
count(genre1)
test <- all_events %>%
filter(!is.na(genre1), venue_id == 2029634) %>%
count(genre1)
test
hchart(test$n)
hchart(test$genre1)
hc <- highchart() %>%
hc_xAxis(categories = test$genre1) %>%
hc_add_series(name = "counts", data = test$n)
hc
hc <- hc %>%
hc_chart(type = "column")
hc
hc <- highchart() %>%
hc_xAxis(categories = test$genre1) %>%
hc_add_series(data = test$n)
hc <- hc %>%
hc_chart(type = "column")
hc
test <- all_events %>%
filter(!is.na(genre1), venue_id == 2029634) %>%
count(genre1) %>%
right_join(distinct(all_events$genre1))
distinct(all_events$genre1)
all_events$genre1
test <- all_events %>%
filter(!is.na(genre1), venue_id == 2029634) %>%
count(genre1) %>%
right_join(distinct(as.factor(all_events$genre1)))
all_events
all_events(genre2)
all_events
all_events$genre1
all_events$genre2
test <- all_events %>%
mutate(new_genre = ifelse(is.na(genre1), genre2, genre1))
filter(!is.na(new_genre), venue_id == 2029634) %>%
count(new_genre)
all_events
test
test <- all_events
test$genre <- ifelse(is.na(test$genre1), genre2, genre1)
all_events
test$genre <- ifelse(is.na(test$genre1), test$genre2, test$genre1)
test$genre
test <- test %>%
filter(!is.na(genre), venue_id == 2029634) %>%
count(genre)
test
test <- test %>%
filter(!is.na(genre2), venue_id == 2029634) %>%
count(genre2)
test
test
runApp()
all_events
test <- all_events %>%
filter(!is.na(genre2), venue_id == 2029634) %>%
count(genre2)
test
test <- all_events %>%
filter(!is.na(genre), venue_id == 2029634) %>%
count(genre)
all_events
str(all_events)
runApp()
runApp()
test <- all_events %>%
filter(!is.na(genre), venue_id == 2029634) %>%
count(genre)
test
hc <- highchart() %>%
hc_xAxis(categories = test$genre) %>%
hc_add_series(data = test$n)
hc
hc <- hc %>%
hc_chart(type = "column")
hc
runApp()
test <- all_events %>%
filter(!is.na(genre), venue_id == 2029634) %>%
count(genre)
hc <- highchart() %>%
hc_xAxis(categories = test$genre) %>%
hc_add_series(data = test$n)
hc <- hc %>%
hc_chart(type = "column")
runApp()
test <- all_events %>%
filter(!is.na(genre), venue_id == 2029634) %>%
count(genre)
hc <- highchart() %>%
hc_xAxis(categories = test$genre) %>%
hc_add_series(data = test$n)
hc <- hc %>%
hc_chart(type = "column")
hc
test <- all_events %>%
filter(!is.na(term), venue_id == 2029634) %>%
count(term)
test
test <- all_events %>%
filter(!is.na(term), venue_id == 2029634) %>%
count(term) %>%
arrange(n)
test
test <- all_events %>%
filter(!is.na(term), venue_id == 2029634) %>%
count(term) %>%
arrange(desc(n))
test
runApp()
test <- all_events %>%
filter(!is.na(term)) %>%
count(term) %>%
arrange(desc(n))
test
test <- all_events %>%
filter(!is.na(genre)) %>%
count(genre) %>%
arrange(desc(n))
test
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?highchartOutput
runApp()
runApp()
runApp()
all_events
all_events %>%
select(artist, length(artist))
all_events %>%
length(artist)
all_events %>%
mutate(artist_length = length(artist))
all_events %>%
mutate(artist_length = length(artist)) %>%
select(artist_length)
nchar(all_events$name)
apply(all_events$name, nchar)
lapply(all_events$name, nchar)
all_events %>%
mutate(len = nchar(name)) %>%
select(name, len)
all_events %>%
mutate(len = nchar(artist)) %>%
select(name, len)
all_events %>%
mutate(len = nchar(artist)) %>%
select(artist, len)
runApp()
runApp()
runApp()
runApp()
runApp()
?hc_title
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
sfspatial$genre1
unique(sfspatial$genre1)
sfspatial
sfspatial@data
sfspatial@data
unique(all_events$genre)
runApp()
runApp()
data <- events_all()
all_events %>%
count(genre)
all_events %>%
sum(genre)
all_events
runApp()
?hc_tooltip
runApp()
runApp()
runApp()
rsconnect::deployApp()
shiny::runApp()
library(shinyapps)
terminateApp()
terminateApp(events_leaflet)
?terminateApp
terminateApp("events_leaflet")
terminateApp("shannon")
terminateApp("eda-viz-master")
rsconnect::deployApp()
terminateApp("events_leaflet")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp()
runApp()
?tags$script
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
readOGR("data/shapefiles/sf_analysis", "geo_export_ab474caf-43cf-4b23-b57a-d3312b48d848")
sf <- readOGR("data/shapefiles/sf_analysis", "geo_export_ab474caf-43cf-4b23-b57a-d3312b48d848")
plot(sf)
runApp()
runApp()
View(venues)
runApp()
runApp()
runApp()
runApp()
View(venues)
runApp()
shiny::runApp()
runApp()
runApp()
sfspatia@data
sfspatial@data
plot(sfspatial@data, text = "neighborhood")
plot(sfspatial@data)
plot(sfspatial)
plot(sfspatial, text = sfspatial@data$num_venues)
plot(sfspatial, text = sfspatial@data$neighborhood)
plot(sfspatial, label = sfspatial@data$neighborhood)
?plot
plot(sfspatial@data)
plot(sfspatial)
labels <- c(sfspatial@data$neighborhood)
text(sfspatial@data$neighborhood)
sfspatial@data$neighborhood
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
sf_plan
sf_plan@polygons
sf_plan@data
head(sf_spatial)
head(sf_plan)
summary(sf_plan)
sf_plan@plotOrder
sf_plan@polygons
setwd("~/Downloads/")
census <- readOGR("~/Downloads/Analysis Neighborhoods - census tracts assigned to neighborhoods", layer = "geo_export_3b167b62-0feb-4c85-8f19-d05af6652e37")
census <- readOGR("Analysis Neighborhoods - census tracts assigned to neighborhoods", layer = "geo_export_3b167b62-0feb-4c85-8f19-d05af6652e37")
census@data
plot(census)
census@data
runApp('~/Development/maps/events_leaflet')
runApp('~/Development/maps/events_leaflet')
runApp('~/Development/maps/events_leaflet')
shiny::runApp()
